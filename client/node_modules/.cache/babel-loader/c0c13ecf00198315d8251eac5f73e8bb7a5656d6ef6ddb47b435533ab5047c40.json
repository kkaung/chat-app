{"ast":null,"code":"import { api, decodeToken } from '../../utilities';\nasync function registerUser(dispatch, inputs) {\n  dispatch({\n    type: 'REGISTER_PENDING'\n  });\n  try {\n    const res = await api.post('/auth/register', inputs);\n    dispatch({\n      type: 'REGISTER_SUCCESS',\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: 'REGISTER_FAILED',\n      payload: err.response.data.message\n    });\n  }\n}\nasync function loginUser(dispatch, inputs) {\n  dispatch({\n    type: 'LOGIN_PENDING'\n  });\n  try {\n    const res = await api.post('/auth/login', inputs);\n    const token = res.data.token;\n    const user = decodeToken(token);\n    JSON.dispatch({\n      type: 'LOGIN_SUCCESS',\n      payload: user\n    });\n  } catch (err) {\n    dispatch({\n      type: 'LOGIN_FAILED',\n      payload: err.response.data.message\n    });\n  }\n}\nexport { registerUser, loginUser };","map":{"version":3,"names":["api","decodeToken","registerUser","dispatch","inputs","type","res","post","payload","data","err","response","message","loginUser","token","user","JSON"],"sources":["/app/src/store/Auth/AuthActions.ts"],"sourcesContent":["import { RegisterUser, LoginUser } from '../../type';\nimport { api, decodeToken } from '../../utilities';\nimport { Dispatch } from './AuthContext';\n\nasync function registerUser(dispatch: Dispatch, inputs: RegisterUser) {\n    dispatch({ type: 'REGISTER_PENDING' });\n    try {\n        const res = await api.post('/auth/register', inputs);\n        dispatch({ type: 'REGISTER_SUCCESS', payload: res.data });\n    } catch (err: any) {\n        dispatch({\n            type: 'REGISTER_FAILED',\n            payload: err.response.data.message as string,\n        });\n    }\n}\n\nasync function loginUser(dispatch: Dispatch, inputs: LoginUser) {\n    dispatch({ type: 'LOGIN_PENDING' });\n\n    try {\n        const res = await api.post('/auth/login', inputs);\n        const token = res.data.token;\n\n        const user = decodeToken(token);\n\n        JSON.\n\n        dispatch({ type: 'LOGIN_SUCCESS', payload: user });\n    } catch (err: any) {\n        dispatch({\n            type: 'LOGIN_FAILED',\n            payload: err.response.data.message as string,\n        });\n    }\n}\n\nexport { registerUser, loginUser };\n"],"mappings":"AACA,SAASA,GAAG,EAAEC,WAAW,QAAQ,iBAAiB;AAGlD,eAAeC,YAAY,CAACC,QAAkB,EAAEC,MAAoB,EAAE;EAClED,QAAQ,CAAC;IAAEE,IAAI,EAAE;EAAmB,CAAC,CAAC;EACtC,IAAI;IACA,MAAMC,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,gBAAgB,EAAEH,MAAM,CAAC;IACpDD,QAAQ,CAAC;MAAEE,IAAI,EAAE,kBAAkB;MAAEG,OAAO,EAAEF,GAAG,CAACG;IAAK,CAAC,CAAC;EAC7D,CAAC,CAAC,OAAOC,GAAQ,EAAE;IACfP,QAAQ,CAAC;MACLE,IAAI,EAAE,iBAAiB;MACvBG,OAAO,EAAEE,GAAG,CAACC,QAAQ,CAACF,IAAI,CAACG;IAC/B,CAAC,CAAC;EACN;AACJ;AAEA,eAAeC,SAAS,CAACV,QAAkB,EAAEC,MAAiB,EAAE;EAC5DD,QAAQ,CAAC;IAAEE,IAAI,EAAE;EAAgB,CAAC,CAAC;EAEnC,IAAI;IACA,MAAMC,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,aAAa,EAAEH,MAAM,CAAC;IACjD,MAAMU,KAAK,GAAGR,GAAG,CAACG,IAAI,CAACK,KAAK;IAE5B,MAAMC,IAAI,GAAGd,WAAW,CAACa,KAAK,CAAC;IAE/BE,IAAI,CAEJb,QAAQ,CAAC;MAAEE,IAAI,EAAE,eAAe;MAAEG,OAAO,EAAEO;IAAK,CAAC,CAAC;EACtD,CAAC,CAAC,OAAOL,GAAQ,EAAE;IACfP,QAAQ,CAAC;MACLE,IAAI,EAAE,cAAc;MACpBG,OAAO,EAAEE,GAAG,CAACC,QAAQ,CAACF,IAAI,CAACG;IAC/B,CAAC,CAAC;EACN;AACJ;AAEA,SAASV,YAAY,EAAEW,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}