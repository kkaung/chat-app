{"ast":null,"code":"import { useContext, useRef, useLayoutEffect } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport { useVisualElementContext, clamp, calcLength } from 'framer-motion';\nimport { MotionCanvasContext } from './MotionCanvasContext.mjs';\nimport { invariant } from 'hey-listen';\nconst calcBoxSize = _ref => {\n  let {\n    x,\n    y\n  } = _ref;\n  return {\n    width: calcLength(x),\n    height: calcLength(y),\n    top: 0,\n    left: 0\n  };\n};\nfunction useLayoutCamera(_ref2, updateCamera) {\n  let {\n    makeDefault = true\n  } = _ref2;\n  const context = useContext(MotionCanvasContext);\n  invariant(Boolean(context), \"No MotionCanvas detected. Replace Canvas from @react-three/fiber with MotionCanvas from framer-motion.\");\n  const {\n    dimensions,\n    layoutCamera,\n    requestedDpr\n  } = context;\n  const advance = useThree(three => three.advance);\n  const set = useThree(three => three.set);\n  const camera = useThree(three => three.camera);\n  const size = useThree(three => three.size);\n  const gl = useThree(three => three.gl);\n  const parentVisualElement = useVisualElementContext();\n  const measuredLayoutSize = useRef();\n  useLayoutEffect(() => {\n    measuredLayoutSize.current = size;\n    updateCamera(size);\n    advance(performance.now());\n    const projection = parentVisualElement === null || parentVisualElement === void 0 ? void 0 : parentVisualElement.projection;\n    if (!projection) return;\n    /**\n     * When the projection of an element changes we want to update the camera\n     * with the projected dimensions.\n     */\n    const removeProjectionUpdateListener = projection.addEventListener(\"projectionUpdate\", newProjection => updateCamera(calcBoxSize(newProjection)));\n    /**\n     * When the layout of an element changes we want to update the renderer\n     * output to match the layout dimensions.\n     */\n    const removeLayoutMeasureListener = projection.addEventListener(\"measure\", newLayout => {\n      const newSize = calcBoxSize(newLayout);\n      let dpr = requestedDpr;\n      const {\n        width,\n        height\n      } = dimensions.current.size;\n      const xScale = width / newSize.width;\n      const yScale = height / newSize.height;\n      const maxScale = Math.max(xScale, yScale);\n      dpr = clamp(0.75, 4, maxScale);\n      dimensions.current = {\n        size: {\n          width: newSize.width,\n          height: newSize.height\n        },\n        dpr\n      };\n      gl.setSize(newSize.width, newSize.height);\n      gl.setPixelRatio(dpr);\n    });\n    /**\n     * When a projection animation completes we want to update the camera to\n     * match the recorded layout of the element.\n     */\n    const removeAnimationCompleteListener = projection.addEventListener(\"animationComplete\", () => {\n      const {\n        layoutBox\n      } = projection.layout || {};\n      if (layoutBox) {\n        setTimeout(() => {\n          const newSize = calcBoxSize(layoutBox);\n          updateCamera(newSize);\n          dimensions.current = {\n            size: newSize\n          };\n          gl.setSize(newSize.width, newSize.height);\n          gl.setPixelRatio(requestedDpr);\n        }, 50);\n      }\n    });\n    return () => {\n      removeProjectionUpdateListener();\n      removeLayoutMeasureListener();\n      removeAnimationCompleteListener();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useLayoutEffect(() => {\n    const {\n      current: cam\n    } = layoutCamera;\n    if (makeDefault && cam) {\n      const oldCam = camera;\n      set(() => ({\n        camera: cam\n      }));\n      return () => set(() => ({\n        camera: oldCam\n      }));\n    }\n  }, [camera, layoutCamera, makeDefault, set]);\n  return {\n    size,\n    camera,\n    cameraRef: layoutCamera\n  };\n}\nexport { useLayoutCamera };","map":{"version":3,"names":["useContext","useRef","useLayoutEffect","useThree","useVisualElementContext","clamp","calcLength","MotionCanvasContext","invariant","calcBoxSize","x","y","width","height","top","left","useLayoutCamera","updateCamera","makeDefault","context","Boolean","dimensions","layoutCamera","requestedDpr","advance","three","set","camera","size","gl","parentVisualElement","measuredLayoutSize","current","performance","now","projection","removeProjectionUpdateListener","addEventListener","newProjection","removeLayoutMeasureListener","newLayout","newSize","dpr","xScale","yScale","maxScale","Math","max","setSize","setPixelRatio","removeAnimationCompleteListener","layoutBox","layout","setTimeout","cam","oldCam","cameraRef"],"sources":["/app/node_modules/framer-motion-3d/dist/es/components/use-layout-camera.mjs"],"sourcesContent":["import { useContext, useRef, useLayoutEffect } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport { useVisualElementContext, clamp, calcLength } from 'framer-motion';\nimport { MotionCanvasContext } from './MotionCanvasContext.mjs';\nimport { invariant } from 'hey-listen';\n\nconst calcBoxSize = ({ x, y }) => ({\n    width: calcLength(x),\n    height: calcLength(y),\n    top: 0,\n    left: 0,\n});\nfunction useLayoutCamera({ makeDefault = true }, updateCamera) {\n    const context = useContext(MotionCanvasContext);\n    invariant(Boolean(context), \"No MotionCanvas detected. Replace Canvas from @react-three/fiber with MotionCanvas from framer-motion.\");\n    const { dimensions, layoutCamera, requestedDpr } = context;\n    const advance = useThree((three) => three.advance);\n    const set = useThree((three) => three.set);\n    const camera = useThree((three) => three.camera);\n    const size = useThree((three) => three.size);\n    const gl = useThree((three) => three.gl);\n    const parentVisualElement = useVisualElementContext();\n    const measuredLayoutSize = useRef();\n    useLayoutEffect(() => {\n        measuredLayoutSize.current = size;\n        updateCamera(size);\n        advance(performance.now());\n        const projection = parentVisualElement === null || parentVisualElement === void 0 ? void 0 : parentVisualElement.projection;\n        if (!projection)\n            return;\n        /**\n         * When the projection of an element changes we want to update the camera\n         * with the projected dimensions.\n         */\n        const removeProjectionUpdateListener = projection.addEventListener(\"projectionUpdate\", (newProjection) => updateCamera(calcBoxSize(newProjection)));\n        /**\n         * When the layout of an element changes we want to update the renderer\n         * output to match the layout dimensions.\n         */\n        const removeLayoutMeasureListener = projection.addEventListener(\"measure\", (newLayout) => {\n            const newSize = calcBoxSize(newLayout);\n            let dpr = requestedDpr;\n            const { width, height } = dimensions.current.size;\n            const xScale = width / newSize.width;\n            const yScale = height / newSize.height;\n            const maxScale = Math.max(xScale, yScale);\n            dpr = clamp(0.75, 4, maxScale);\n            dimensions.current = {\n                size: { width: newSize.width, height: newSize.height },\n                dpr,\n            };\n            gl.setSize(newSize.width, newSize.height);\n            gl.setPixelRatio(dpr);\n        });\n        /**\n         * When a projection animation completes we want to update the camera to\n         * match the recorded layout of the element.\n         */\n        const removeAnimationCompleteListener = projection.addEventListener(\"animationComplete\", () => {\n            const { layoutBox } = projection.layout || {};\n            if (layoutBox) {\n                setTimeout(() => {\n                    const newSize = calcBoxSize(layoutBox);\n                    updateCamera(newSize);\n                    dimensions.current = { size: newSize };\n                    gl.setSize(newSize.width, newSize.height);\n                    gl.setPixelRatio(requestedDpr);\n                }, 50);\n            }\n        });\n        return () => {\n            removeProjectionUpdateListener();\n            removeLayoutMeasureListener();\n            removeAnimationCompleteListener();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    useLayoutEffect(() => {\n        const { current: cam } = layoutCamera;\n        if (makeDefault && cam) {\n            const oldCam = camera;\n            set(() => ({ camera: cam }));\n            return () => set(() => ({ camera: oldCam }));\n        }\n    }, [camera, layoutCamera, makeDefault, set]);\n    return { size, camera, cameraRef: layoutCamera };\n}\n\nexport { useLayoutCamera };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}